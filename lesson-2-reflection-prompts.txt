What happens when you initialize a repository? Why do you need to do it?
	Initializing a repository creates a .git folder which is a hidden folder that contains the metadata used by git to track version history and what not.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area is a spot holder for which files wille be comitted to the history of the repository. it allows us to pic and choes which files in the working directory we are tracking. 

How can you use the staging area to make sure you have one commit per logical
change?
	by using git diff and git diff --staged you can check to see what changes that you are commiting.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	creating multiple versions of a game. this would help as you could have the base functionality code working and then make the alterations that are needed to get the new version working in each branch.
	

How do the diagrams help you visualize the branch structure?
	by drawing the diagram you can see that git does not just save things linearly but can alter in multiple different directions.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
